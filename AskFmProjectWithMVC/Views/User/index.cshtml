@model UserWithFollowingAnswerViewModel

@{
    ViewData["Title"] = "My Profile";
}


<h1 class="profile-heading">My Profile</h1>

<div class="profile-container">
    <div class="image">
        <img src="/Images/@Model.image" />
    
        <label for="file-input">
            <img src="/Images/addPhoto.webp" class="add" onclick="changePhoto()" />
        </label>


    </div>
    <h1 class="profile-name">@Model.username</h1>
    <small class="profile-follows profile-description">@Model.bio</small><br />
    <small style="margin:10px">@Model.followers followers</small><br />
    <a asp-action="editProfile" class="btn btn-outline-info">Edit The Profile</a>
    <div>
        <textarea placeholder="Ask Me Any Thing" cols="20" rows="6" oninput="onInput(event)" id="question" name="questionText" class="form-input form-control"></textarea>
        <div class="switch">
            <input id="unkown" type="checkbox" name="unkown">
            <label>ask as anonymous</label>
        </div>
        <input id="btn" disabled type="button" class="btn btn-outline-primary" onclick="onAsk()" value="Ask">
    </div>

</div>

@if (Model.FollowingAns.Count == 0)
{
    <h3 class="text-center">There is No Anwer To Show</h3>
}

@foreach (var item in Model.FollowingAns)
{

    <div class="card" id="@item.id">
        <div class="card-body">
            
            <div class="content">
                <p class="question">@item.question.question_text <small><a asp-action="profile" asp-route-id="@item.question.user_who_ask_id" class="asker">@item.question.user_who_ask?.username  </a></small></p>
                <div class="row">
                    @* <img src="/Images/@Model.image" class="images" /> *@
                        <cite class="source" title="Source Title">@item.post_date</cite> <!--@(item.question.post_date - DateTime.Now) -->
                </div>
                <hr>
                <h6 class="answer" id="theAnsewer_@item.id">@item.answer_text</h6>
                <button class="love-button">

                    @if ((bool)ViewData[item.id.ToString()])
                    {

                        <i id="fillLove_@item.id" onclick="addLike(@item.id, 'r')" class="fas fa-heart"></i>
                        <i onclick="addLike(@item.id, 'a')" id="emptyLove_@item.id" class="disapear far fa-heart"></i>

                    }
                    else
                    {
                        <i id="fillLove_@item.id" onclick="addLike(@item.id, 'r')" class="disapear fas fa-heart"></i>
                        <i onclick="addLike(@item.id, 'a')" id="emptyLove_@item.id" class="far fa-heart"></i>
                    }

                    <small onclick="showLikes(@item.id)" class="numberOfLikes numberOfLikes_@item.id">@item.likeCount</small>
                </button>
                <button onclick="edite_answer(@item.id, '@item.answer_text')" class="edit_btn btn btn-outline-info">Edit</button>
                <button onclick="deleteAnswer(@item.id)" class="delete_btn btn btn-outline-danger">Delete</button>
            </div>
        </div>
    </div>
}


@section scripts {
   
    <script>
        const modalContainer = document.querySelector('.modal-container');
        const closeModal = document.querySelector('.close');
        const editeAnswerInput = document.getElementById("editeAnswer");
        const answer_id = document.getElementById("answer_id");
        closeModal.addEventListener('click', closeModel);
        function closeModel() {
            modalContainer.classList.remove('fade-in');
            modalContainer.style.display = 'none';
        }
        function edite_answer(id, answer_text) {
            modalContainer.classList.add('fade-in');
            modalContainer.style.display = 'block';
            answer_id.value = id;
            editeAnswerInput.value = answer_text;
        }
        function deleteAnswer(id) {
            var answerCard = document.getElementById(id);
            fetch("/Answer/deleteAnswer/" + id).then(res => {
                answerCard.style = "display: none";
            }).catch();
        }
        const btn = document.getElementById("btn");
        function onInput(e) {
            const length = e.target.value.length;
            if (length >= 3 && length <= 200)
                btn.removeAttribute("disabled");
            else
                btn.setAttribute("disabled", "");
        }
        function onAsk(){
            var question = document.getElementById("question");
            const unkown = document.getElementById("unkown");
            fetch("/User/ask/@Model.id?questionText=" + question.value + "&unkown=" + unkown.checked ).then(r => {
                btn.setAttribute("disabled", "");
                question.value = "";
            }
            ).catch() 
        }

        function showLikes(id) {
            fetch("/like/usersWhoLike?answer_id=" + id).then(res => {
                return res.json()

            }).then(s => {
                modalContainer.classList.add('fade-in');
                modalContainer.style.display = 'block';
                let div = document.getElementById("users");
                div.innerHTML = "";
                s.map((item, index) => {
                    var child = document.createElement("p");
                    child.setAttribute("class", "userWhoLove")
                    child.innerHTML = item;
                    div.appendChild(child);
                })

            }).catch();
        }

        function addLike(id, flag) {
            var counter = document.getElementsByClassName("numberOfLikes_" + id)[0];
            let count = Number(counter.innerHTML);
            if (flag == 'a') {
                fetch("/like/addLike?answerId=" + id).then(res => {
                    count++;
                    counter.innerHTML = count.toString();
                }).catch();
            } else if (flag == 'r') {
                fetch("/like/removeLike?answerId=" + id).then(res => {
                    count--;
                    counter.innerHTML = count.toString();
                }).catch();
            }
            counter.innerHTML = count.toString();
            var likeBtn = document.getElementById("fillLove_" + id);
            var emptyBtn = document.getElementById("emptyLove_" + id);
            likeBtn.classList.toggle("disapear");
            emptyBtn.classList.toggle("disapear");
        }


        function saveEditeAnswer() {
            const theAnsewer = document.getElementById("theAnsewer_" + answer_id.value);
            fetch("/Answer/editAnswer/" + answer_id.value + "?answerText=" + editeAnswerInput.value).then(res => {
                closeModel();
                theAnsewer.innerHTML = editeAnswerInput.value;
            }).catch()
        }

        function onInputAnswer(e) {
            const btn = document.getElementById("saveAnswer");
            const length = e.target.value.length;
            if (length >= 3 && length <= 200)
                btn.removeAttribute("disabled");
            else
                btn.setAttribute("disabled", "");
        }


        const openmodel = document.querySelector('.newImage');
        const closemodel = document.querySelector('.closeImage');
        closemodel.addEventListener('click', () => {
            openmodel.classList.remove('fade-in');
            openmodel.style.display = 'none';
        });

        function changePhoto() {
            openmodel.classList.add('fade-in');
            openmodel.style.display = 'block';
        }

    </script>

}



@section styles {
    <link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />
}


<div class="newImage">
    <div class="modal-content">
        <span class="closeImage">&times;</span>
        <h2>Change Your Photo</h2>
        <form asp-action="updatgeImage" enctype="multipart/form-data">
        <input accept="image/*" id="file-input" name="imageUrl" type="file" class="form-input form-control"  />
        <input type="submit" value="Upload" class="btn btn-primary" />
        </form>
    </div>
</div>


<div class="modal-container">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Edit the Answer</h2>
        <input hidden id="answer_id" />
        <input oninput="onInputAnswer(event)" id="editeAnswer" type="text" class="form-input form-control" />
        <button id="saveAnswer" onclick="saveEditeAnswer()" class="btn btn-outline-info">Save</button>
    </div>
</div>